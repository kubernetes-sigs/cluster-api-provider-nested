/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha3

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// NestedControlPlaneSpec defines the desired state of NestedControlPlane
type NestedControlPlaneSpec struct {
	// ClusterNamespace allows you to specify the namespace where the control
	// plane components are run, if you don't specify one then the namespace
	// will be in the format of {namespace}-{vcp.uid}. This also makes up the
	// prefixes used for all Namespaces in the cluster.
	// e.g. {namespace}-{vcp.uid}-{vc-namespace}
	// +optional
	ClusterNamespace string `json:"clusterNamespace,omitempty"`

	// ClusterDomain allows you to specify the domain name of the nested
	// cluster. e.g. a pod dns will be
	// {some-pod}.{some-namespace}.svc.{ClusterDomain}
	// +kubebuilder:default=cluster.local
	ClusterDomain string `json:"clusterDomain,omitempty"`

	// TemplateRef allows you to specify the control plane template to create
	// the control plane.
	// +optional
	TemplateRef *corev1.ObjectReference `json:"configRef,omitempty"`

	// PKIExpireDays allows you to specify the period of time the nested
	// cluster PKI, if not set the PKI will expire after 1 year.
	// +optional
	// +kubebuilder:default=365
	PKIExpireDays int64 `json:"pkiExpireDays,omitempty"`

	// TransparentMetaPrefixes allows you to specify the key prefix of labels
	// or annotations that should be back populated to Nested Cluster. These
	// meta data are generated by super master controllers, which are needed by
	// nested cluster to interact with external systems.
	// +optional
	TransparentMetaPrefixes []string `json:"transparentMetaPrefixes,omitempty"`

	// OpaqueMetaPrefixes allows you to specify the key prefix of labels or
	// annotations that are not visible to Nested Cluster but are kept in
	// super master. For example, the annotations added by syncer controller.
	// +optional
	OpaqueMetaPrefixes []string `json:"opaqueMetaPrefixes,omitempty"`
}

// NestedControlPlaneStatus defines the observed state of NestedControlPlane
type NestedControlPlaneStatus struct {
	// ClusterNamespace denotes the namespace where the control plane components
	// are deployed into.
	// +optional
	ClusterNamespace string `json:"clusterNamespace,omitempty"`

	// Ready denotes that the NestedControlPlane API Server is ready to
	// receive requests and that the VPC infra is ready.
	// +optional
	Ready bool `json:"ready"`

	// Conditions specifies the cpnditions for the managed control plane
	// Conditions clusterv1.Conditions `json:"conditions,omitempty"`
}

// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Namespaced,categories=cluster-api;capn;capi,shortName=ncp
// +kubebuilder:printcolumn:name="ClusterNamespace",type="string",JSONPath=".status.clusterNamespace",description="Namespace of the cluster",priority=1

// NestedControlPlane is the Schema for the nestedcontrolplanes API
type NestedControlPlane struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   NestedControlPlaneSpec   `json:"spec,omitempty"`
	Status NestedControlPlaneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NestedControlPlaneList contains a list of NestedControlPlane
type NestedControlPlaneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NestedControlPlane `json:"items"`
}

func init() {
	SchemeBuilder.Register(&NestedControlPlane{}, &NestedControlPlaneList{})
}
